@page "/recipedetails/{id}"
@inject RecipeStore Recipes

<ContentView>
    <ScrollView>
        <StackLayout>
            <Label Text="@Recipe.Title"></Label>
            <StackLayout Orientation="StackOrientation.Horizontal">
                <Label>
                    <Span>Servings: @Recipe.ScaledServings </Span>
                    <Span>
                        <TapGestureRecognizer OnTapped="OnOriginalServingsTapped" />
                        (orig: @Recipe.OriginalServings)
                    </Span>
                </Label>
                <Slider HorizontalOptions="LayoutOptions.FillAndExpand" Minimum="1" Maximum="@(Math.Max(Recipe.OriginalServings * 4, 20))" @bind-Value="ServingsBind" />
            </StackLayout>
            <Label Text="Ingredients"></Label>
            @foreach (var ingredient in Recipe.IngredientListings)
            {
                <StackLayout Orientation="StackOrientation.Horizontal"
                             Margin="new Thickness(left: 40, 0, 0, 0)">
                    <CheckBox VerticalOptions="LayoutOptions.Center" @bind-IsChecked="ingredient.IsDone" />
                    <Label Text="@($"{FractionHelper.FormatFraction(ingredient.Quantity)} {ingredient.Unit} {ingredient.Name}")"
                           VerticalOptions="LayoutOptions.Center"
                           Opacity="@(ingredient.IsDone ? 0.5d : 1d)">
                        <TapGestureRecognizer OnTapped="@(() => OnIngredientTapped(ingredient))" />
                    </Label>
                </StackLayout>
            }

            <Label Text="Steps"></Label>
            @for (int i = 0; i < Recipe.Steps.Count; i++)
            {
                <Label Margin="new Thickness(left: 40, 0, 0, 0)"
                       Text="@($"{i+1}. {Recipe.Steps[i]}")">
                </Label>
            }
        </StackLayout>
    </ScrollView>
</ContentView>

@code
{
    RecipeDisplay Recipe;

    /// <summary>
    /// Used for two-way binding the UI. Also does necessary conversion between the Slider's double and
    /// the decimal that we use.
    /// </summary>
    public double ServingsBind
    {
        get
        {
            return Recipe.ScaledServings;
        }
        set
        {
            Recipe.ScaledServings = Convert.ToInt32(Math.Round(value));
        }
    }

    void OnIngredientTapped(IngredientListing ingredient)
    {
        ingredient.IsDone = !ingredient.IsDone;
    }

    void OnOriginalServingsTapped()
    {
        Recipe.ScaledServings = Recipe.OriginalServings;
    }

    [Parameter]
    public int id
    {
        set
        {
            Recipe = new RecipeDisplay(Recipes.GetRecipes().Single(r => r.ID == value));
            Recipe.Changed += (s, e) => StateHasChanged();
        }
    }
}
