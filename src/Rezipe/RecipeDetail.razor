@page "/recipedetails/{id}"
@inject RecipeStore Recipes

<ContentView>
    <ScrollView>
        <StackLayout>
            <Label Text="@Recipe.Title"></Label>
            <StackLayout Orientation="StackOrientation.Horizontal">
                <Label><Span>Servings: @Servings (orig: @Recipe.Servings)</Span></Label>
                <Slider HorizontalOptions="LayoutOptions.FillAndExpand" Minimum="1" Maximum="@(Math.Max(Recipe.Servings * 4, 20))" @bind-Value="ServingsBind" />
            </StackLayout>
            <Label Text="Ingredients"></Label>
            @foreach (var ingredient in IngredientListings)
            {
                <StackLayout Orientation="StackOrientation.Horizontal"
                             Margin="new Thickness(left: 40, 0, 0, 0)">
                    <CheckBox VerticalOptions="LayoutOptions.Center" @bind-IsChecked="ingredient.IsDone" />
                    <Label Text="@($"{FractionHelper.FormatFraction(GetScaledIngredient(ingredient.Ingredient.Quantity, Recipe.Servings, Servings))} {ingredient.Ingredient.Unit} {ingredient.Ingredient.Name}")"
                           VerticalOptions="LayoutOptions.Center"
                           TextDecorations="@(ingredient.IsDone ? TextDecorations.Strikethrough : TextDecorations.None)">
                        <TapGestureRecognizer OnTapped="@(() => OnIngredientTapped(ingredient))" />
                    </Label>
                </StackLayout>
            }

            <Label Text="Steps"></Label>
            @for (int i = 0; i < Recipe.Steps.Count; i++)
            {
                <Label Margin="new Thickness(left: 40, 0, 0, 0)"
                       Text="@($"{i+1}. {Recipe.Steps[i]}")">
                </Label>
            }
        </StackLayout>
    </ScrollView>
</ContentView>
@code {
    Recipe Recipe;

    private int? _servings;

    /// <summary>
    /// Used for two-way binding the UI. Also does necessary conversion between the Slider's double and
    /// the decimal that we use.
    /// </summary>
    public double ServingsBind
    {
        get
        {
            return Servings;
        }
        set
        {
            Servings = Convert.ToInt32(Math.Round(value));
        }
    }

    /// <summary>
    /// Used to calculate the number of servings to multiple the ingredients by.
    /// </summary>
    public int Servings
    {
        get
        {
            if (!_servings.HasValue)
            {
                _servings = Recipe.Servings;
            }
            return _servings.Value;
        }
        set
        {
            _servings = value;
            StateHasChanged();
        }
    }

    void OnIngredientTapped(IngredientListing ingredient)
    {
        ingredient.IsDone = !ingredient.IsDone;
        StateHasChanged();
    }

    List<IngredientListing> _ingredientListings;
    List<IngredientListing> IngredientListings
    {
        get
        {
            if (_ingredientListings == null)
            {
                _ingredientListings = Recipe.Ingredients.Select(i => new IngredientListing { Ingredient = i }).ToList();
            }
            return _ingredientListings;
        }
    }

    private sealed class IngredientListing
    {
        public bool IsDone { get; set; }
        public Ingredient Ingredient { get; set; }
    }

    [Parameter]
    public int id
    {
        set
        {
            Recipe = Recipes.GetRecipes().Single(r => r.ID == value);
        }
    }

    private decimal GetScaledIngredient(decimal value, int valueServings, int desiredServings)
    {
        return value * desiredServings / valueServings;
    }
}
