@page "/recipedetails/{id}"
@inject RecipeStore Recipes

<ContentView>
    <ScrollView>
        <StackLayout Padding="10">
            <Label Text="@Recipe.Title" FontSize="30" HorizontalTextAlignment="TextAlignment.Center"></Label>
            <StackLayout Orientation="StackOrientation.Horizontal">
                <Label>
                    <Span>Servings: @Recipe.ScaledServings</Span>
                </Label>
                <Label>
                    <Span>(orig: @Recipe.OriginalServings)</Span>
                    <TapGestureRecognizer OnTapped="OnOriginalServingsTapped" />
                </Label>
                <Slider HorizontalOptions="LayoutOptions.FillAndExpand" Minimum="1" Maximum="@(Math.Max(Recipe.OriginalServings * 4, 20))" @bind-Value="ServingsBind" />
            </StackLayout>
            <Label Text="Ingredients" FontAttributes="FontAttributes.Bold" />
            <Grid ColumnDefinitions="1*, 1*, 4*" RowDefinitions="@string.Join(",", Enumerable.Range(0, Recipe.IngredientListings.Count).Select(_ => "Auto"))">
                @for (int i = 0; i < Recipe.IngredientListings.Count; i++)
                {
                    var ingredient = Recipe.IngredientListings[i];

                    <GridCell Row="@i" Column="0">
                        <CheckBox VerticalOptions="LayoutOptions.Center" @bind-IsChecked="ingredient.IsDone"
                                  Margin="new Thickness(left: 20, 0, 0, 0)" />
                    </GridCell>
                    <GridCell Row="@i" Column="1">
                        <Label Text="@($"{FractionHelper.FormatFraction(ingredient.Quantity)} {ingredient.Unit}")"
                               FontSize="14"
                               VerticalOptions="LayoutOptions.Center"
                               Opacity="@(ingredient.IsDone ? 0.5d : 1d)">
                            <TapGestureRecognizer OnTapped="@(() => OnIngredientTapped(ingredient))" />
                        </Label>
                    </GridCell>
                    <GridCell Row="@i" Column="2">
                        <Label Text="@($"{ingredient.Name}")"
                               FontSize="14"
                               FontAttributes="FontAttributes.Bold"
                               VerticalOptions="LayoutOptions.Center"
                               Opacity="@(ingredient.IsDone ? 0.5d : 1d)">
                            <TapGestureRecognizer OnTapped="@(() => OnIngredientTapped(ingredient))" />
                        </Label>
                    </GridCell>
                }
            </Grid>

            <Label Text="Steps" FontAttributes="FontAttributes.Bold" />
            @for (int i = 0; i < Recipe.Steps.Count; i++)
            {
                var step = Recipe.Steps[i];

                <Label Margin="new Thickness(left: 20, 0, 0, 0)"
                       Text="@($"{i+1}. {Recipe.Steps[i].Step}")"
                       Opacity="@(step.IsDone ? 0.5d : 1d)">
                    <TapGestureRecognizer OnTapped="@(() => OnStepTapped(step))" />
                </Label>
            }
        </StackLayout>
    </ScrollView>
</ContentView>

@code
{
    RecipeDisplay Recipe;

    /// <summary>
    /// Used for two-way binding the UI. Also does necessary conversion between the Slider's double and
    /// the decimal that we use.
    /// </summary>
    public double ServingsBind
    {
        get
        {
            return Recipe.ScaledServings;
        }
        set
        {
            Recipe.ScaledServings = Convert.ToInt32(Math.Round(value));
        }
    }

    void OnIngredientTapped(IngredientListing ingredient)
    {
        ingredient.IsDone = !ingredient.IsDone;
    }

    void OnStepTapped(StepListing step)
    {
        step.IsDone = !step.IsDone;
    }

    void OnOriginalServingsTapped()
    {
        Recipe.ScaledServings = Recipe.OriginalServings;
    }

    [Parameter]
    public int id
    {
        set
        {
            Recipe = new RecipeDisplay(Recipes.GetRecipes().Single(r => r.ID == value));
            Recipe.Changed += (s, e) => StateHasChanged();
        }
    }
}
