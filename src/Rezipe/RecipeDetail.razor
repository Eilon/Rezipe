@page "/recipedetails/{id}"
@inject RecipeStore Recipes

<ContentView>
    <ScrollView>
        <StackLayout>
            <Label Text="@Recipe.Title"></Label>
            <StackLayout Orientation="StackOrientation.Horizontal">
                <Label><Span>Servings: @Servings (orig: @Recipe.Servings)</Span></Label>
                <Slider HorizontalOptions="LayoutOptions.FillAndExpand" Minimum="1" Maximum="@(Math.Max(Recipe.Servings * 4, 20))" @bind-Value="ServingsBind" />
            </StackLayout>
            <Label Text="Ingredients"></Label>
            @foreach (var ingredient in Recipe.Ingredients)
            {
                <Label Margin="new Thickness(left: 40, 0, 0, 0)"
                       Text="@($"[ ] {FractionHelper.FormatFraction(GetScaledIngredient(ingredient.Quantity, Recipe.Servings, Servings))} {ingredient.Unit} {ingredient.Name}")">
                </Label>
            }

            <Label Text="Steps"></Label>
            @for (int i = 0; i < Recipe.Steps.Count; i++)
            {
                <Label Margin="new Thickness(left: 40, 0, 0, 0)"
                       Text="@($"{i+1}. {Recipe.Steps[i]}")">
                </Label>
            }
        </StackLayout>
    </ScrollView>
</ContentView>
@code {
    Recipe Recipe;

    private int? _servings;

    public double ServingsBind
    {
        get
        {
            return Servings;
        }
        set
        {
            Servings = Convert.ToInt32(Math.Round(value));
        }
    }

    public int Servings
    {
        get
        {
            if (!_servings.HasValue)
            {
                _servings = Recipe.Servings;
            }
            return _servings.Value;
        }
        set
        {
            _servings = value;
            StateHasChanged();
        }
    }

    [Parameter]
    public int id
    {
        set
        {
            Recipe = Recipes.GetRecipes().Single(r => r.ID == value);
        }
    }

    private decimal GetScaledIngredient(decimal value, int valueServings, int desiredServings)
    {
        return value * desiredServings / valueServings;
    }
}
