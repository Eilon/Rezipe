<Grid Padding="new Thickness(10)" RowDefinitions="Auto, Auto" ColumnDefinitions="Auto, *">
    <TapGestureRecognizer OnTapped="Details" />
    <GridCell RowSpan="2">
        @*<Image Source="new UriImageSource { Uri=new Uri(Animal.ImageUrl) }"
            Aspect="Aspect.AspectFill"
            HeightRequest="60"
            WidthRequest="60" />*@
    </GridCell>

    <GridCell Column="1">
        <Label Text="@Recipe.Title"
               FontAttributes="FontAttributes.Bold" />
    </GridCell>

    <GridCell Row="1" Column="1">
        <Label FontAttributes="FontAttributes.Italic"
               VerticalOptions="LayoutOptions.End">
            <Span>Servings: @Recipe.Servings; cook time: @GetCookTimeDisplay(Recipe.CookTime)</Span>
        </Label>
    </GridCell>
</Grid>

@code
{
    [Parameter] public Recipe Recipe { get; set; }

    [Parameter] public EventCallback<Recipe> OnClick { get; set; }

    void Details()
    {
        if (OnClick.HasDelegate)
            OnClick.InvokeAsync(Recipe);
    }

    private static string GetCookTimeDisplay(TimeSpan cookTime)
    {
        var ret = new System.Text.StringBuilder();
        if (cookTime.Days > 0)
        {
            ret.AppendFormat(CultureInfo.CurrentCulture, "{0}d", cookTime.Days);
        }
        if (cookTime.Hours > 0)
        {
            if (ret.Length > 0)
            {
                ret.Append(" ");
            }
            ret.AppendFormat(CultureInfo.CurrentCulture, "{0}h", cookTime.Hours);
        }
        if (cookTime.Minutes > 0)
        {
            if (ret.Length > 0)
            {
                ret.Append(" ");
            }
            ret.AppendFormat(CultureInfo.CurrentCulture, "{0}m", cookTime.Minutes);
        }
        // Ignore seconds. Recipes aren't specified in seconds.
        if (ret.Length == 0)
        {
            return "unknown";
        }
        return ret.ToString();
    }
}
