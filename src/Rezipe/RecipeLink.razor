@inject UserDataStore UserStore

<Grid Padding="new Thickness(10)" RowDefinitions="Auto, Auto" ColumnDefinitions="Auto, *, Auto">
    <TapGestureRecognizer OnTapped="Details" />
    <GridCell RowSpan="2">
        @*<Image Source="new UriImageSource { Uri=new Uri(Animal.ImageUrl) }"
            Aspect="Aspect.AspectFill"
            HeightRequest="60"
            WidthRequest="60" />*@
    </GridCell>

    <GridCell Column="1">
        <Label Text="@Recipe.Title"
               FontAttributes="FontAttributes.Bold"
               TextColor="GetThemeColor(lightColor: Color.Black, darkColor: Color.White)" />
    </GridCell>

    <GridCell Row="1" Column="1">
        <Label FontAttributes="FontAttributes.Italic"
               VerticalOptions="LayoutOptions.End"
               TextColor="GetThemeColor(lightColor: Color.Black, darkColor: Color.White)">
            <Span>Servings: @Recipe.Servings; cook time: @Recipe.CookTime.ToCookTimeDisplay()</Span>
        </Label>
    </GridCell>

    <GridCell Column="2" RowSpan="2">
        @if (isFavorite)
        {
            <Image Source="@(ImageSource.FromResource("Rezipe.images.favorite.png"))" />
        }
    </GridCell>
</Grid>

@code
{
    [Parameter] public bool ShowFavorite { get; set; }

    [Parameter] public Recipe Recipe { get; set; }

    [Parameter] public EventCallback<Recipe> OnClick { get; set; }

    bool isFavorite;

    private async Task UpdateIsFavorite()
    {
        if (ShowFavorite)
        {
            isFavorite = await UserStore.IsFavoriteRecipe(Recipe);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await UpdateIsFavorite();

        await base.OnParametersSetAsync();
    }

    void Details()
    {
        if (OnClick.HasDelegate)
            OnClick.InvokeAsync(Recipe);
    }

    protected override Task OnInitializedAsync()
    {
        UserStore.FavoritesChanged += async () => { await UpdateIsFavorite(); StateHasChanged(); };

        return base.OnInitializedAsync();
    }
}
